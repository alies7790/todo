{"version":3,"sources":["store/TodoModel.js","store/TodoStore.js","components/TodoEnty.js","components/TodoItem.js","components/TodoItems.js","components/TodoNavigate.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","this","makeObservable","observable","toggle","action","todos","lastId","all","active","completes","todosShow","addTodo","DeleteTodo","SetAll","SetActive","SetCompletes","ClearCompleted","newTodos","map","todo","push","id1","TodoEnty","state","value","handleKeyDown","event","keyCode","todoStore","setState","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","onToggle","props","TodoStore","checked","onClick","observer","TodoItems","TodoNavigate","selectAll","selectActive","selectCompleted","clearCompleted","length","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1268863e.chunk.js","sourcesContent":["import {makeObservable,action,observable} from 'mobx'\r\n\r\n\r\nexport default class TodoModel{\r\n    \r\n    constructor(store,title,completed,id){\r\n        this.title=title\r\n        this.completed=completed\r\n        this.id=id\r\n        this.store=store\r\n        makeObservable(this,{\r\n            title:observable,\r\n            completed:observable,\r\n            toggle:action\r\n        })\r\n        \r\n    }\r\n\r\n    toggle(){\r\n        this.completed= !this.completed\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {action,observable,makeObservable} from 'mobx'\r\nimport TodoModel from './TodoModel'\r\n\r\nclass TodoStore{\r\n    todos =[]\r\n    lastId=0\r\n    all =true\r\n    active = false\r\n    completes=false\r\n    todosShow=[]\r\n    constructor(){\r\n        makeObservable(this,{\r\n            todos:observable,\r\n            addTodo:action,\r\n            todosShow:observable,\r\n            DeleteTodo:action,\r\n            SetAll:action,\r\n            SetActive:action,\r\n            SetCompletes:action,\r\n            ClearCompleted:action\r\n        })\r\n    }\r\n    SetAll(){\r\n        this.all =true\r\n        this.active = false\r\n        this.completes=false\r\n        this.todosShow=this.todos\r\n    }\r\n\r\n    SetActive(){\r\n        this.all =false\r\n        this.active = true\r\n        this.completes=false\r\n        let newTodos=[]\r\n        this.todos.map(todo =>{\r\n            if(todo.completed ===false ){\r\n                newTodos.push(todo)\r\n            }\r\n            return null\r\n        })\r\n         this.todosShow =newTodos\r\n\r\n    }\r\n\r\n    SetCompletes(){\r\n        this.all =false\r\n        this.active = false\r\n        this.completes=true\r\n        let newTodos=[]\r\n        this.todos.map(todo =>{\r\n            if(todo.completed ===true){\r\n                newTodos.push(todo)\r\n            }\r\n            return null\r\n        })\r\n         this.todosShow =newTodos\r\n    }\r\n\r\n    ClearCompleted(){\r\n        let newTodos=[]\r\n        this.todos.map(todo =>{\r\n            if(todo.completed ===false){\r\n                newTodos.push(todo)\r\n            }\r\n            return null\r\n        })\r\n         this.todos =newTodos\r\n\r\n         if(this.all ===true ){\r\n            this.SetAll()\r\n        }else if(this.active === true){\r\n            this.SetActive()\r\n        }else{\r\n            this.SetCompletes()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addTodo(title){\r\n        this.todos.push(new TodoModel(this,title ,false,this.lastId))\r\n        this.lastId+=1\r\n        if(this.all ===true ){\r\n            this.SetAll()\r\n        }else if(this.active === true){\r\n            this.SetActive()\r\n        }else{\r\n            this.SetCompletes()\r\n        }\r\n    }\r\n\r\n    DeleteTodo(id1){\r\n        let newTodos=[]\r\n        this.todos.map(todo =>{\r\n            if(todo.id !==id1){\r\n                newTodos.push(todo)\r\n            }\r\n            return null\r\n        })\r\n         this.todos =newTodos\r\n         if(this.all ===true ){\r\n            this.SetAll()\r\n        }else if(this.active === true){\r\n            this.SetActive()\r\n        }else{\r\n            this.SetCompletes()\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nconst store = new TodoStore()\r\n\r\nexport default store","import React,{Component} from 'react'\r\nimport todoStore from '../store/TodoStore'\r\nclass TodoEnty extends Component{\r\n    state={\r\n        value:''\r\n    };\r\n    handleKeyDown = event =>{\r\n        if(event.keyCode !== 13){\r\n            return;\r\n        }else{\r\n            todoStore.addTodo(this.state.value)\r\n            this.setState({\r\n                value:''\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <header className=\"header\">\r\n                <h1>todo</h1>\r\n                <input\r\n                value={this.state.value}\r\n                onChange={event => this.setState({value: event.target.value })}\r\n                onKeyDown={\r\n                    event=>this.handleKeyDown(event)\r\n                }\r\n                type=\"text\"\r\n                className=\"new-todo\"\r\n                placeholder=\"What needs to be done?\"/>\r\n            </header>\r\n                    );\r\n    }\r\n}\r\nexport default TodoEnty","\r\nimport React,{Component} from 'react'\r\nimport {observer} from 'mobx-react'\r\nclass TodoItem extends Component{\r\n  \r\n  onToggle=()=>{\r\n    this.props.todo.toggle()\r\n  }\r\n  DeleteTodo=()=>{\r\n    this.props.TodoStore.DeleteTodo(this.props.todo.id)\r\n  }\r\n    render(){\r\n      const {todo}=this.props\r\n\r\n        return(\r\n            <li className={todo.completed ? 'completed' :''}>\r\n            <div className=\"view\">\r\n              <input\r\n              onChange={this.onToggle}\r\n                type=\"checkbox\"\r\n                className=\"toggle\"\r\n                value=\"on\"\r\n                checked={todo.completed}\r\n              />\r\n\r\n              <label>{todo.title}</label>\r\n              <button className=\"destroy\" onClick={this.DeleteTodo} />\r\n            </div>\r\n          </li>\r\n        )\r\n    }\r\n}\r\nexport default observer(TodoItem)","import React, { Component } from \"react\";\r\nimport {observer} from 'mobx-react'\r\nimport TodoStore from '../store/TodoStore'\r\nimport TodoItem from './TodoItem'\r\n\r\nclass TodoItems extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n        {\r\n            TodoStore.todosShow.map(todo=>{\r\n              return(\r\n              <TodoItem key={todo.id} todo={todo} TodoStore={TodoStore}/>\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default observer(TodoItems);\r\n","import React,{Component}from 'react'\r\nimport {observer} from \"mobx-react\"\r\n\r\nimport TodoStore from '../store/TodoStore'\r\n\r\nclass TodoNavigate extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state=({\r\n            all:false,\r\n            active:false,\r\n            completed:false\r\n        })\r\n    }\r\n    selectAll = ()=>{\r\n        this.setState({\r\n            all:true,\r\n            active:false,\r\n            completed:false\r\n        })   \r\n        TodoStore.SetAll()\r\n    }\r\n\r\n    selectActive = () =>{\r\n        this.setState({\r\n            all:false,\r\n            active:true,\r\n            completed:false\r\n        })\r\n        TodoStore.SetActive();\r\n    }\r\n\r\n    selectCompleted = () =>{\r\n        this.setState({\r\n            all:false,\r\n            active:false,\r\n            completed:true\r\n        })\r\n        TodoStore.SetCompletes();\r\n    }\r\n\r\n    clearCompleted =() =>{\r\n        TodoStore.ClearCompleted();\r\n    }\r\n    \r\n    render(){\r\n        if(TodoStore.todos.length>0){\r\n        return(\r\n            <div className=\"footer\" >\r\n                <button  className=\"todo-count\">\r\n                    <span>{TodoStore.todos.filter(todo => todo.completed === false).length} item left</span>\r\n                </button>\r\n\r\n                <ul className=\"filters\">\r\n                    <li onClick={this.selectAll} >\r\n                        <button className={this.state.all ? \"selected\" : \" \" }>All</button>\r\n                    </li>\r\n                    <li onClick={this.selectActive} >\r\n                        <button className={this.state.active ? \"selected\" : \" \" }>Active</button>\r\n                    </li>\r\n                    <li onClick={this.selectCompleted} >\r\n                        <button className={this.state.completed ? \"selected\" : \" \" }>Completed</button>\r\n                    </li>\r\n                </ul>\r\n\r\n                <button className=\"clear-completed\" onClick={this.clearCompleted}> clear completed</button>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )}else{\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nexport default observer(TodoNavigate)","import TodoEnty from './components/TodoEnty';\nimport TodoItems from './components/TodoItems';\nimport TodoNavigate from './components/TodoNavigate'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"todoapp\">\n<TodoEnty></TodoEnty>\n<TodoItems></TodoItems>\n<TodoNavigate></TodoNavigate>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}